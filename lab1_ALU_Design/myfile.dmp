$date
	Mon Nov 18 10:50:04 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module TB $end
$var wire 16 ! ALU_OUT [15:0] $end
$var wire 1 " Cout $end
$var reg 16 # A [15:0] $end
$var reg 16 $ B [15:0] $end
$var reg 16 % Failed [15:0] $end
$var reg 16 & Passed [15:0] $end
$var reg 3 ' SEL [2:0] $end
$scope module YourALU $end
$var wire 16 ( A [15:0] $end
$var wire 16 ) ALU_OUT [15:0] $end
$var wire 16 * B [15:0] $end
$var wire 1 " Cout $end
$var wire 3 + SEL [2:0] $end
$var reg 16 , alu [15:0] $end
$var reg 1 - c $end
$upscope $end
$scope task AddTest $end
$upscope $end
$scope task ArithmeticTest $end
$upscope $end
$scope task BitwiseTest $end
$upscope $end
$scope task LrsTest $end
$upscope $end
$scope task NandTest $end
$upscope $end
$scope task NorTest $end
$upscope $end
$scope task NotTest $end
$upscope $end
$scope task ShiftTest $end
$upscope $end
$scope task SubTest $end
$upscope $end
$scope task Test $end
$var reg 16 . A_ [15:0] $end
$var reg 16 / B_ [15:0] $end
$var reg 16 0 C_expected [15:0] $end
$var reg 1 1 Cout_expected $end
$var reg 129 2 test_name [128:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b100000101100100011001000010110100110001 2
01
b0 0
b0 /
b0 .
0-
b0 ,
b0 +
b0 *
b0 )
b0 (
b0 '
b0 &
b0 %
b0 $
b0 #
0"
b0 !
$end
#1
b1 ,
b1 !
b1 )
b1 #
b1 (
b1 0
b1 .
b100000101100100011001000010110100110010 2
b1 &
#2
b101 ,
b101 !
b101 )
b11 $
b11 *
b10 #
b10 (
b101 0
b11 /
b10 .
b100000101100100011001000010110100110011 2
b10 &
#3
b101 ,
b101 !
b101 )
b10 $
b10 *
b11 #
b11 (
b10 /
b11 .
b100000101100100011001000010110100110100 2
b11 &
#4
b101 ,
b101 !
b101 )
b11 $
b11 *
b10 #
b10 (
b11 /
b10 .
b100000101100100011001000010110100110101 2
b100 &
#5
b101 ,
b101 !
b101 )
b10 $
b10 *
b11 #
b11 (
b10 /
b11 .
b100000101100100011001000010110100110110 2
b101 &
#6
1-
1"
b0 ,
b0 !
b0 )
b1000000000000000 $
b1000000000000000 *
b1000000000000000 #
b1000000000000000 (
11
b0 0
b1000000000000000 /
b1000000000000000 .
b100000101100100011001000010110100110111 2
b110 &
#7
1-
1"
b1 $
b1 *
b1111111111111111 #
b1111111111111111 (
b1 /
b1111111111111111 .
b100000101100100011001000010110100111000 2
b111 &
#8
b1111111111111110 ,
b1111111111111110 !
b1111111111111110 )
1-
1"
b1111111111111111 $
b1111111111111111 *
b1111111111111110 0
b1111111111111111 /
b100000101100100011001000010110100111001 2
b1000 &
#9
0-
0"
b0 ,
b0 !
b0 )
b0 $
b0 *
b0 #
b0 (
01
b0 0
b0 /
b0 .
b101001101110101011000100010110100110001 2
b1 '
b1 +
b1001 &
#10
b1 ,
b1 !
b1 )
b1 #
b1 (
b1 0
b1 .
b101001101110101011000100010110100110010 2
b1010 &
#11
b1111111111111111 ,
b1111111111111111 !
b1111111111111111 )
b1 $
b1 *
b0 #
b0 (
b1111111111111111 0
b1 /
b0 .
b101001101110101011000100010110100110011 2
b1011 &
#12
b0 ,
b0 !
b0 )
b1111111111111111 $
b1111111111111111 *
b1111111111111111 #
b1111111111111111 (
b0 0
b1111111111111111 /
b1111111111111111 .
b101001101110101011000100010110100110100 2
b1100 &
#13
b1 ,
b1 !
b1 )
b10 $
b10 *
b11 #
b11 (
b1 0
b10 /
b11 .
b101001101110101011000100010110100110101 2
b1101 &
#14
b1111111111111110 ,
b1111111111111110 !
b1111111111111110 )
b0 #
b0 (
b1111111111111110 0
b0 .
b101001101110101011000100010110100110110 2
b1110 &
#15
b1 ,
b1 !
b1 )
b1111111111111111 $
b1111111111111111 *
b1 0
b1111111111111111 /
b101001101110101011000100010110100110111 2
b1111 &
#16
b1111111111111111 ,
b1111111111111111 !
b1111111111111111 )
b101010101010101 $
b101010101010101 *
b1010101010101010 #
b1010101010101010 (
b1111111111111111 0
b101010101010101 /
b1010101010101010 .
b10011100110000101101110011001000010110100110001 2
b10 '
b10 +
b10000 &
#17
b1011101110111011 ,
b1011101110111011 !
b1011101110111011 )
b110011001100110 #
b110011001100110 (
b1011101110111011 0
b110011001100110 .
b10011100110000101101110011001000010110100110010 2
b10001 &
#18
b10001000100010 ,
b10001000100010 !
b10001000100010 )
b1101110111011101 $
b1101110111011101 *
b101010101010101 #
b101010101010101 (
b10001000100010 0
b1101110111011101 /
b101010101010101 .
b100111001101111011100100010110100110001 2
b11 '
b11 +
b10010 &
#19
b110011001100110 ,
b110011001100110 !
b110011001100110 )
b1000100010001 $
b1000100010001 *
b1000100010001000 #
b1000100010001000 (
b110011001100110 0
b1000100010001 /
b1000100010001000 .
b100111001101111011100100010110100110010 2
b10011 &
#20
b1111111111111111 ,
b1111111111111111 !
b1111111111111111 )
b0 $
b0 *
b0 #
b0 (
b1111111111111111 0
b0 /
b0 .
b100111001101111011101000010110100110001 2
b100 '
b100 +
b10100 &
#21
b1111111111111110 ,
b1111111111111110 !
b1111111111111110 )
b1 #
b1 (
b1111111111111110 0
b1 .
b100111001101111011101000010110100110010 2
b10101 &
#22
b11010100000001 ,
b11010100000001 !
b11010100000001 )
b1100101011111110 #
b1100101011111110 (
b11010100000001 0
b1100101011111110 .
b100111001101111011101000010110100110011 2
b10110 &
#23
b101 ,
b101 !
b101 )
b1010 #
b1010 (
b101 0
b1010 .
b100110001110010011100110010110100110001 2
b101 '
b101 +
b10111 &
#24
b0 ,
b0 !
b0 )
b1 #
b1 (
b0 0
b1 .
b100110001110010011100110010110100110010 2
b11000 &
#25
b111111111111101 ,
b111111111111101 !
b111111111111101 )
b1111111111111010 #
b1111111111111010 (
b111111111111101 0
b1111111111111010 .
b100110001110010011100110010110100110011 2
b11001 &
#26
b111111111111111 ,
b111111111111111 !
b111111111111111 )
b1111111111111111 #
b1111111111111111 (
b111111111111111 0
b1111111111111111 .
b100110001110010011100110010110100110100 2
b11010 &
#27
b11011 &
